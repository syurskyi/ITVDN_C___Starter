#include "stdafx.h"
#include <iostream>>

using namespace std;

// ѕри выполнениии арифметических операций компил€тор руководствуетс€ следующими правилами:
// 1. ≈сли тип целочисленный, то выполн€етс€ операци€ над целочисленными числами
// 2. ≈сли оба операнда имеют знак, или оба операнда беззнаковые, и один из них имеет меньший диапазон допустимых значений, чем другой, он преобразуетс€ в тип, который имеет больший диапазон значений
// 3. ≈сли один операнд имеет знак, а другой беззнаковый, в этом случаеесли беззнаковый операнд имеет больший диапазон допустимых значений, чем операнд со знаком, то знаковый операнд преобразуетс€ в тип беззнакового операнда
// 4. ≈сли тип со знаком может представить все значени€ беззнакового типа, беззнаковый операнд преобразуетс€ к типу операнда со знаком.
// 5. »наче оба операнда преобразуютс€ в беззнаковую версию типа со знаком. 
// 6. ≈сли один из операндов имеет тип float, то другой операнд преобразуетс€ в float.
// 7. ≈сли один из операндов имеет тип double, то другой операнд преобразуетс€ в double.
// 8. ≈сли один из операндов имеет тип long double, то другой операнд преобразуетс€ в long double.

int main()
{
	int operand1 = 3, operand2 = 2; // ћножественное обь€вление
	int result;

	// —ложение (+)
	result = operand1 + operand2;
	cout << result << endl;

	// ¬ычитание (-)
	result = operand1 - operand2;
	cout << result << endl;

	// ”множение (*)
	result = operand1 * operand2;
	cout << result << endl;

	// ƒеление (/)
	result = operand1 / operand2;
	cout << result << endl;

	// ѕолучение остатка от делени€
	result = operand1 % operand2;
	cout << result << endl;

	// ќператор % находит остаток от делени€ первого операнда на второй.
	// ќба операнда должны быть целочисленными, использование операции % над числами с плавающей точкой приведет к ошибке времени компил€ции.

	// double err = 3.5 % 1.2;		// ќшибка

	result = 3 * 2 * 2;	
	cout << result << endl;

	// «адержка
	cin.get();
    return 0;
}